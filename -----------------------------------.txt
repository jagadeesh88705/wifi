//----------------------------------------------
//
//         Sketch Generated by Visuino
//               www.visuino.com
//           Version 8.0.0.101
//
//------------------ Source --------------------
//
// jagadeesh.visuino
//
//----------------------------------------------

#define VISUINO_ESP8266
#define VISUINO_NODE_MCU

#include <OpenWire.h>
#include <Mitov.h>
#include <ESP8266WiFi.h>
#include <Mitov_ESP8266_WiFi.h>
#include <Mitov_Internet_Time.h>
#include <Mitov_StandardSerial.h>
#include <Mitov_ESP8266Serial.h>
#include <Mitov_Timing.h>
#include <Mitov_Text.h>
#include <Mitov_FormattedText.h>


// Shared Component Member Variables

namespace ComponentVariables
{
class
{
public:
  bool Value1 : 1;
  bool Value2 : 1;
  bool Value3 : 1;
  bool Value4 : 1;
  bool Value5 : 1;
  bool Value6 : 1;
  bool Value7 : 1;
  bool Value8 : 1;
  bool Value9 : 1;
  bool Value10 : 1;

} BitFields;

class Variable1
{
public:
  inline static bool GetValue() { return BitFields.Value1; }
  inline static void SetValue( bool AValue ) { BitFields.Value1 = AValue; }

};

class Variable2
{
public:
  inline static bool GetValue() { return BitFields.Value2; }
  inline static void SetValue( bool AValue ) { BitFields.Value2 = AValue; }

};

class Variable3
{
public:
  inline static bool GetValue() { return BitFields.Value3; }
  inline static void SetValue( bool AValue ) { BitFields.Value3 = AValue; }

};

class Variable4
{
public:
  inline static bool GetValue() { return BitFields.Value4; }
  inline static void SetValue( bool AValue ) { BitFields.Value4 = AValue; }

};

class Variable5
{
public:
  inline static bool GetValue() { return BitFields.Value5; }
  inline static void SetValue( bool AValue ) { BitFields.Value5 = AValue; }

};

class Variable6
{
public:
  inline static bool GetValue() { return BitFields.Value6; }
  inline static void SetValue( bool AValue ) { BitFields.Value6 = AValue; }

};

class Variable7
{
public:
  inline static bool GetValue() { return BitFields.Value7; }
  inline static void SetValue( bool AValue ) { BitFields.Value7 = AValue; }

};

class Variable8
{
public:
  inline static bool GetValue() { return BitFields.Value8; }
  inline static void SetValue( bool AValue ) { BitFields.Value8 = AValue; }

};

class Variable9
{
public:
  inline static bool GetValue() { return BitFields.Value9; }
  inline static void SetValue( bool AValue ) { BitFields.Value9 = AValue; }

};

class Variable10
{
public:
  inline static bool GetValue() { return BitFields.Value10; }
  inline static void SetValue( bool AValue ) { BitFields.Value10 = AValue; }

};

} // ComponentVariables

// Arduino Constant Declarations

namespace VisuinoConstants
{
class FloatValue1
{
public:
    inline static constexpr float GetValue() { return -1; }
};

class FloatValue0
{
public:
    inline static constexpr float GetValue() { return 20.5; }
};

class FloatValue2
{
public:
    inline static constexpr float GetValue() { return 0; }
};

class FloatValue3
{
public:
    inline static constexpr float GetValue() { return 1; }
};

class TextValue0
{
public:
    inline static constexpr const char *GetValue() { return ""; }
};

class TextValue3
{
public:
    inline static constexpr const char *GetValue() { return "time1.google.com"; }
};

class TextValue5
{
public:
    inline static constexpr const char *GetValue() { return "SSID: \""; }
};

class TextValue1
{
public:
    inline static constexpr const char *GetValue() { return "pool.ntp.org"; }
};

class TextValue4
{
public:
    inline static constexpr const char *GetValue() { return "\r\nScan\r\n-----------------"; }
};

class TextValue7
{
public:
    inline static constexpr const char *GetValue() { return " Channel "; }
};

class TextValue6
{
public:
    inline static constexpr const char *GetValue() { return "\" Signal: "; }
};

class TextValue2
{
public:
    inline static constexpr const char *GetValue() { return "time.nist.gov"; }
};

} // VisuinoConstants

// Pin Call Declarations

namespace PinCalls
{
class PinCallerReceive0
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive1
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive2
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive3
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive4
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive5
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive6
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive7
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive8
{
public:
  void Notify( void *_Data );

};
} // PinCalls

// Call Chains

namespace CallChains
{
class IsEnabled1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  static void Call( int32_t AIndex, bool & AValue );

};
class TryConnect1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  static void Call( int32_t AIndex, bool & AValue );

};
class AssignDNS1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  static void Call( int32_t AIndex );

};
class TryStart1
{
public:
  inline static constexpr uint32_t Count() { return 1; }
  static void Call();

};
class StopSocket1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  static void Call();

};
class PeriodicCall1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  static void Call();

};
class TryActive1
{
public:
  inline static constexpr uint32_t Count() { return 0; }
  static void Call( bool & AResult );

};
class Processed1
{
public:
  inline static constexpr uint32_t Count() { return 3; }
  static void Call();

};
class CanProcess1
{
public:
  inline static constexpr uint32_t Count() { return 3; }
  static void Call( bool & AResult );

};
class Process1
{
public:
  inline static constexpr uint32_t Count() { return 3; }
  static void Call( Mitov::String &AText );

};
} // CallChains

// System Objects Declarations

namespace BoardDeclarations
{
Mitov::TPeriodMicros<1000000, ::CallChains::PeriodicCall1> SystemPeriodMicros_1000000;
} // BoardDeclarations

// Arduino Board Declarations

namespace BoardDeclarations
{
namespace Types
{
typedef Mitov::SerialESP8266Port<
  SERIAL_TYPE, // 0_T_TYPE
  Serial, // 1_C_OBJECT
  Mitov::ConstantProperty<4, uint32_t, 0 >, // AfterSendingDelay = 0 (Default)
  Mitov::ConstantProperty<7, uint32_t, 8 >, // DataBits = 8 (Default)
  Mitov::ConstantProperty<2, bool, true >, // Enabled = True (Default)
  Mitov::ConstantProperty<15, uint32_t, 0 >, // FEndTime = 0
  Mitov::ConstantProperty<13, bool, false >, // FSending = False
  Mitov::GenericPin_NoImplementation<5 >, // OutputPin
  Mitov::ConstantProperty<9, Mitov::TArduinoStandardSerialParity, Mitov::spNone >, // Parity = spNone (Default)
  Mitov::ConstantProperty<10, bool, true >, // ReceiveEnabled = True (Default)
  Mitov::DigitalPin_NoImplementation<3 >, // SendingOutputPin
  Mitov::ConstantProperty<6, uint32_t, 9600 >, // Speed = 9600 (Default)
  Mitov::ConstantProperty<8, uint32_t, 1 >, // StopBits = 1 (Default)
  Mitov::ConstantProperty<11, bool, true >, // TransmitEnabled = True (Default)
  Mitov::ConstantProperty<12, bool, false > // UseAlternativePins = False (Default)
   > SerialPort0;
} // Types

namespace Instances
{
Types::SerialPort0 SerialPort0;
} // Instances

} // BoardDeclarations

// Declarations

namespace Declarations
{
namespace Types
{
typedef Mitov::ESP8266WiFiModule<
  Mitov::NestedProperty<48, Mitov::ESP8266WiFiModuleAccessPoint<
    Mitov::ConstantProperty<47, uint32_t, 100 >, // BeaconInterval = 100 (Default)
    Mitov::ConstantProperty<12, uint32_t, 1 >, // Channel = 1 (Default)
    Mitov::NestedProperty<34, Mitov::ESPWiFiModuleAccessPointConfig<
      Mitov::ConstantProperty<15, bool, false >, // Enabled = False (Default)
      Mitov::NestedProperty<27, Mitov::TIPAddress<
        Mitov::ConstantProperty<23, uint8_t, 0 >, // Octet1 = 0 (Default)
        Mitov::ConstantProperty<24, uint8_t, 0 >, // Octet2 = 0 (Default)
        Mitov::ConstantProperty<25, uint8_t, 0 >, // Octet3 = 0 (Default)
        Mitov::ConstantProperty<26, uint8_t, 0 > // Octet4 = 0 (Default)
         > >, // Gateway
      Mitov::NestedProperty<21, Mitov::TIPAddress<
        Mitov::ConstantProperty<17, uint8_t, 0 >, // Octet1 = 0 (Default)
        Mitov::ConstantProperty<18, uint8_t, 0 >, // Octet2 = 0 (Default)
        Mitov::ConstantProperty<19, uint8_t, 0 >, // Octet3 = 0 (Default)
        Mitov::ConstantProperty<20, uint8_t, 0 > // Octet4 = 0 (Default)
         > >, // IP
      Mitov::NestedProperty<33, Mitov::TIPAddress<
        Mitov::ConstantProperty<29, uint8_t, 255 >, // Octet1 = 255 (Default)
        Mitov::ConstantProperty<30, uint8_t, 255 >, // Octet2 = 255 (Default)
        Mitov::ConstantProperty<31, uint8_t, 255 >, // Octet3 = 255 (Default)
        Mitov::ConstantProperty<32, uint8_t, 0 > // Octet4 = 0 (Default)
         > > // Subnet
       > >, // Config
    Mitov::ConstantProperty<9, bool, true >, // Enabled = True (Default)
    Mitov::ConstantProperty<13, bool, false >, // IsHidden = False (Default)
    Mitov::NestedProperty<45, Mitov::ESPWiFiModuleOptionalMacAddress<
      Mitov::ConstantProperty<36, bool, false >, // Enabled = False (Default)
      Mitov::NestedProperty<44, Mitov::TMACAddress<
        Mitov::ConstantProperty<38, uint8_t, 0 >, // Octet1 = 0 (Default)
        Mitov::ConstantProperty<39, uint8_t, 0 >, // Octet2 = 0 (Default)
        Mitov::ConstantProperty<40, uint8_t, 0 >, // Octet3 = 0 (Default)
        Mitov::ConstantProperty<41, uint8_t, 0 >, // Octet4 = 0 (Default)
        Mitov::ConstantProperty<42, uint8_t, 0 >, // Octet5 = 0 (Default)
        Mitov::ConstantProperty<43, uint8_t, 0 > // Octet6 = 0 (Default)
         > > // MacAddress
       > >, // MacAddress
    Mitov::ConstantProperty<46, uint32_t, 4 >, // MaxConnections = 4 (Default)
    Mitov::ConstantPropertyString<11, ::VisuinoConstants::TextValue0 >, // Password = "" (Default)
    Mitov::ConstantPropertyString<10, ::VisuinoConstants::TextValue0 > // SSID = "" (Default)
     > >, // AccessPoint
  Mitov::EmbeddedCallChain<CallChains::AssignDNS1 >, // AccessPoints_AssignDNS
  Mitov::EmbeddedCallChain<CallChains::IsEnabled1 >, // AccessPoints_IsEnabled
  Mitov::EmbeddedCallChain<CallChains::TryConnect1 >, // AccessPoints_TryConnect
  Mitov::TextPin_NoImplementation<2 >, // AddressOutputPin
  Mitov::ConstantProperty<53, bool, true >, // AutoReconnect = True (Default)
  Mitov::TextPin_NoImplementation<4 >, // BSSIDOutputPin
  0, // COUNT_AccessPoints
  1, // COUNT_Scan_Elements = 1
  0, // COUNT_Sockets
  false, // ESPNow
  Mitov::ConstantProperty<1, bool, true >, // Enabled = True (Default)
  Mitov::ConstantProperty<49, uint32_t, 0 >, // FAccessPointIndex = 0
  Mitov::TypedVariable<74, bool, ::ComponentVariables::Variable3 >, // FDNSUpdated = 0
  Mitov::TypedVariable<70, bool, ::ComponentVariables::Variable1 >, // FIsStarted = 0
  Mitov::TypedVariable<72, bool, ::ComponentVariables::Variable2 >, // FRemoteStarted = 0
  Mitov::TextPin_NoImplementation<5 >, // GatewayIPOutputPin
  Mitov::ConstantPropertyString<54, ::VisuinoConstants::TextValue0 >, // HostName = "" (Default)
  Mitov::TextPin_NoImplementation<3 >, // MACOutputPin
  Mitov::NestedProperty<65, Mitov::ESPWiFiModuleOptionalMacAddress<
    Mitov::ConstantProperty<56, bool, false >, // Enabled = False (Default)
    Mitov::NestedProperty<64, Mitov::TMACAddress<
      Mitov::ConstantProperty<58, uint8_t, 0 >, // Octet1 = 0 (Default)
      Mitov::ConstantProperty<59, uint8_t, 0 >, // Octet2 = 0 (Default)
      Mitov::ConstantProperty<60, uint8_t, 0 >, // Octet3 = 0 (Default)
      Mitov::ConstantProperty<61, uint8_t, 0 >, // Octet4 = 0 (Default)
      Mitov::ConstantProperty<62, uint8_t, 0 >, // Octet5 = 0 (Default)
      Mitov::ConstantProperty<63, uint8_t, 0 > // Octet6 = 0 (Default)
       > > // MacAddress
     > >, // MacAddress
  Mitov::EmbeddedCallChain<CallChains::TryStart1 >, // Operations_TryStart
  Mitov::ConstantProperty<67, Mitov::TArduinoESP8266PhysicalMode, Mitov::Mode11N >, // PhysicalMode = 2 (Default)
  Mitov::DigitalPin_NoImplementation<7 >, // RemoteConnectedOutputPin
  Mitov::EmbeddedCallChain<CallChains::StopSocket1 >, // Sockets_StopSocket
  Mitov::TextPin_NoImplementation<6 >, // SubnetMaskIPOutputPin
  Mitov::ConstantPropertyFloat<66, float, ::VisuinoConstants::FloatValue0 > // TransmitPower = 20.5 (Default)
   > TArduinoESP8266WiFiModule1;
} // Types

namespace Instances
{
Types::TArduinoESP8266WiFiModule1 TArduinoESP8266WiFiModule1;
} // Instances

namespace Types
{
typedef Mitov::ESP8266ModuleScanNetworksOperation<
  Declarations::Types::TArduinoESP8266WiFiModule1, // 0_TYPE_OWNER
  Declarations::Instances::TArduinoESP8266WiFiModule1, // 1_NAME_OWNER
  Mitov::TypedPin_EmbeddedPinImplementation<10, ::PinCalls::PinCallerReceive3, int32_t >, // ChannelOutputPin
  Mitov::TypedPin_NoImplementation<5, uint32_t >, // CountOutputPin
  Mitov::ConstantProperty<1, bool, true >, // Enabled = True (Default)
  Mitov::TypedPin_NoImplementation<9, uint32_t >, // EncryptionOutputPin
  Mitov::TypedVariable<13, bool, ::ComponentVariables::Variable5 >, // FScanRequest = 0
  Mitov::ClockPin_NoImplementation<4 >, // FailedOutputPin
  Mitov::ClockPin_EmbeddedPinImplementation<12, ::PinCalls::PinCallerReceive4 >, // FoundNetworkOutputPin
  Mitov::DigitalPin_NoImplementation<11 >, // IsHiddenOutputPin
  Mitov::TextPin_NoImplementation<8 >, // MACAddressOutputPin
  Mitov::TextPin_EmbeddedPinImplementation<7, ::PinCalls::PinCallerReceive2 >, // SSIDOutputPin
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<3, ::PinCalls::PinCallerReceive0, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable4 > >, // ScanningOutputPin
  Mitov::TypedPin_EmbeddedPinImplementation<6, ::PinCalls::PinCallerReceive1, int32_t > // SignalStrengthOutputPin
   > TArduinoESP8266WiFiModuleScanNetworksOperation1;
} // Types

namespace Instances
{
Types::TArduinoESP8266WiFiModuleScanNetworksOperation1 TArduinoESP8266WiFiModuleScanNetworksOperation1;
} // Instances

namespace Types
{
typedef Mitov::TArduinoESP8266WiFiTime<
  Mitov::ConstantProperty<1, bool, true >, // Enabled = True (Default)
  Mitov::VariablePropertyDateTime<23, 737791, 0 >, // InitialValue = 1/1/2021 (Default)
  Mitov::NestedProperty<22, Mitov::TArduinoESP8266WiFiNetworkTime<
    Mitov::NestedProperty<10, Mitov::TArduinoTimeDaylightOffset<
      Mitov::ConstantProperty<8, bool, false >, // Enabled = False (Default)
      Mitov::ConstantPropertyFloat<9, float, ::VisuinoConstants::FloatValue1 > // Offset = -1 (Default)
       > >, // DaylightOffset
    Mitov::ConstantProperty<6, bool, true >, // Enabled = True (Default)
    Mitov::NestedProperty<15, Mitov::TArduinoESP8266WiFiNetworkTimeServer<
      Mitov::ConstantProperty<13, bool, true >, // Enabled = True (Default)
      Mitov::ConstantPropertyString<14, ::VisuinoConstants::TextValue1 > // Host = "pool.ntp.org" (Default)
       > >, // Servers_0
    Mitov::NestedProperty<18, Mitov::TArduinoESP8266WiFiNetworkTimeServer<
      Mitov::ConstantProperty<16, bool, true >, // Enabled = True (Default)
      Mitov::ConstantPropertyString<17, ::VisuinoConstants::TextValue2 > // Host = "time.nist.gov" (Default)
       > >, // Servers_1
    Mitov::NestedProperty<21, Mitov::TArduinoESP8266WiFiNetworkTimeServer<
      Mitov::ConstantProperty<19, bool, true >, // Enabled = True (Default)
      Mitov::ConstantPropertyString<20, ::VisuinoConstants::TextValue3 > // Host = "time1.google.com" (Default)
       > >, // Servers_2
    Mitov::ConstantPropertyFloat<11, float, ::VisuinoConstants::FloatValue2 > // TimeZoneOffset = 0 (Default)
     > >, // NetworkTime
  Mitov::TypedPin_NoImplementation<4, Mitov::TDateTime > // OutputPin
   > TArduinoESP8266WiFiTime1;
} // Types

namespace Instances
{
Types::TArduinoESP8266WiFiTime1 TArduinoESP8266WiFiTime1;
} // Instances

namespace Types
{
typedef Mitov::ArduinoSerialInput_String<BoardDeclarations::Types::SerialPort0, BoardDeclarations::Instances::SerialPort0, char *> SerialPort0_Input_IOWStringStream_1;
} // Types

namespace Instances
{
Types::SerialPort0_Input_IOWStringStream_1 SerialPort0_Input_IOWStringStream_1;
} // Instances

namespace Types
{
typedef Mitov::ClockGenerator_Shared<
  Mitov::ConstantProperty<4, bool, true >, // Enabled = True (Default)
  Mitov::ConstantPropertyFloat<5, float, ::VisuinoConstants::FloatValue3 >, // Frequency = 1 (Default)
  Mitov::ClockPin_EmbeddedPinImplementation<3, ::PinCalls::PinCallerReceive5 > // OutputPin
   > ClockGenerator1; // TArduinoClockGenerator
} // Types

namespace Instances
{
Types::ClockGenerator1 ClockGenerator1; // TArduinoClockGenerator
} // Instances

namespace Types
{
typedef Mitov::DetectEdge<
  Mitov::ConstantProperty<4, bool, true >, // Enabled = True (Default)
  Mitov::TypedVariable<9, bool, ::ComponentVariables::Variable6 >, // FLastValue = False
  Mitov::ConstantProperty<7, bool, false >, // OnAnyChange = False (Default)
  Mitov::ConstantProperty<8, bool, false >, // OnEachSample = False (Default)
  Mitov::ClockPin_EmbeddedPinImplementation<3, ::PinCalls::PinCallerReceive6 >, // OutputPin
  Mitov::ConstantProperty<6, bool, true > // Rising = True (Default)
   > DetectEdge1; // TArduinoDetectEdge
} // Types

namespace Instances
{
Types::DetectEdge1 DetectEdge1; // TArduinoDetectEdge
} // Instances

namespace Types
{
typedef Mitov::TextValue<
  Mitov::EmbeddedCallChain<CallChains::TryActive1 >, // Elements_TryActive
  Mitov::ConstantProperty<8, bool, false >, // FStarted = False
  Mitov::TextPin_EmbeddedPinImplementation<3, ::PinCalls::PinCallerReceive7 >, // OutputPin
  Mitov::ConstantPropertyString<5, ::VisuinoConstants::TextValue4 > // Value = "\r\nScan\r\n-----------------...
   > TextValue1; // TArduinoTextValue
} // Types

namespace Instances
{
Types::TextValue1 TextValue1; // TArduinoTextValue
} // Instances

namespace Types
{
typedef Mitov::FormattedText_Fixed<
  true, // Clock_IsConnected
  3, // Elements
  Mitov::EmbeddedCallChain<CallChains::CanProcess1 >, // Elements_CanProcess
  ::CallChains::Process1, // Elements_Process = 0
  Mitov::EmbeddedCallChain<CallChains::Processed1 >, // Elements_Processed
  Mitov::ConstantProperty<4, bool, true >, // Enabled = True (Default)
  Mitov::ConstantProperty<88, bool, true >, // FModified
  Mitov::TextPin_EmbeddedPinImplementation<3, ::PinCalls::PinCallerReceive8 > // OutputPin
   > FormattedText1; // TArduinoFormattedText
} // Types

namespace Instances
{
Types::FormattedText1 FormattedText1; // TArduinoFormattedText
} // Instances

namespace Types
{
typedef Mitov::FormattedTextElementText<
  Declarations::Types::FormattedText1, // 0_TYPE_OWNER
  Declarations::Instances::FormattedText1, // 1_NAME_OWNER
  Mitov::ConstantProperty<88, bool, true >, // FModified
  Mitov::ConstantProperty<3, char, ' ' >, // FillCharacter = ' ' (Default)
  Mitov::VariablePropertyString<5, ::VisuinoConstants::TextValue0 >, // InitialValue = "" (Default)
  Mitov::ConstantProperty<2, uint32_t, 0 > // Length = 0 (Default)
   > TArduinoFormattedTextElementText1;
} // Types

namespace Instances
{
Types::TArduinoFormattedTextElementText1 TArduinoFormattedTextElementText1;
} // Instances

namespace Types
{
typedef Mitov::TextFormatElementInput_String<Declarations::Types::TArduinoFormattedTextElementText1, Declarations::Instances::TArduinoFormattedTextElementText1, char *> TArduinoFormattedTextElementText1_Input_IOWStringStream_1;
} // Types

namespace Instances
{
Types::TArduinoFormattedTextElementText1_Input_IOWStringStream_1 TArduinoFormattedTextElementText1_Input_IOWStringStream_1;
} // Instances

namespace Types
{
typedef Mitov::FormattedTextElementInteger<
  Declarations::Types::FormattedText1, // 0_TYPE_OWNER
  Declarations::Instances::FormattedText1, // 1_NAME_OWNER
  Mitov::ConstantProperty<4, uint32_t, 10 >, // Base = 10 (Default)
  Mitov::ConstantProperty<88, bool, true >, // FModified
  Mitov::ConstantProperty<3, char, ' ' >, // FillCharacter = ' ' (Default)
  Mitov::VariableProperty<6, int32_t, 0 >, // InitialValue = 0 (Default)
  Mitov::ConstantProperty<2, uint32_t, 0 > // Length = 0 (Default)
   > TArduinoFormattedTextElementInteger1;
} // Types

namespace Instances
{
Types::TArduinoFormattedTextElementInteger1 TArduinoFormattedTextElementInteger1;
} // Instances

namespace Types
{
typedef Mitov::FormattedTextElementInteger<
  Declarations::Types::FormattedText1, // 0_TYPE_OWNER
  Declarations::Instances::FormattedText1, // 1_NAME_OWNER
  Mitov::ConstantProperty<4, uint32_t, 10 >, // Base = 10 (Default)
  Mitov::ConstantProperty<88, bool, true >, // FModified
  Mitov::ConstantProperty<3, char, ' ' >, // FillCharacter = ' ' (Default)
  Mitov::VariableProperty<6, int32_t, 0 >, // InitialValue = 0 (Default)
  Mitov::ConstantProperty<2, uint32_t, 0 > // Length = 0 (Default)
   > TArduinoFormattedTextElementInteger2;
} // Types

namespace Instances
{
Types::TArduinoFormattedTextElementInteger2 TArduinoFormattedTextElementInteger2;
} // Instances

Mitov::TFormattedTextStringItemIndexed<
  ::VisuinoConstants::TextValue5,
  Declarations::Types::TArduinoFormattedTextElementText1,
  Declarations::Instances::TArduinoFormattedTextElementText1
> _o_FormattedText1_o_Indexed0;

Mitov::TFormattedTextStringItemIndexed<
  ::VisuinoConstants::TextValue6,
  Declarations::Types::TArduinoFormattedTextElementInteger1,
  Declarations::Instances::TArduinoFormattedTextElementInteger1
> _o_FormattedText1_o_Indexed1;

Mitov::TFormattedTextStringItemIndexed<
  ::VisuinoConstants::TextValue7,
  Declarations::Types::TArduinoFormattedTextElementInteger2,
  Declarations::Instances::TArduinoFormattedTextElementInteger2
> _o_FormattedText1_o_Indexed2;

} // Declarations

// Call Chains

namespace CallChains
{
void IsEnabled1::Call( int32_t AIndex, bool & AValue )
{
}

void TryConnect1::Call( int32_t AIndex, bool & AValue )
{
}

void AssignDNS1::Call( int32_t AIndex )
{
}

void TryStart1::Call()
{
  Declarations::Instances::TArduinoESP8266WiFiModuleScanNetworksOperation1.TryStart();
}

void StopSocket1::Call()
{
}

void PeriodicCall1::Call()
{
  Declarations::Instances::ClockGenerator1.PeriodicCall();
}

void TryActive1::Call( bool & AResult )
{
}

void Processed1::Call()
{
  Declarations::Instances::TArduinoFormattedTextElementText1.Processed();
  Declarations::Instances::TArduinoFormattedTextElementInteger1.Processed();
  Declarations::Instances::TArduinoFormattedTextElementInteger2.Processed();
}

void CanProcess1::Call( bool & AResult )
{
  Declarations::Instances::TArduinoFormattedTextElementText1.CanProcess( AResult );
  Declarations::Instances::TArduinoFormattedTextElementInteger1.CanProcess( AResult );
  Declarations::Instances::TArduinoFormattedTextElementInteger2.CanProcess( AResult );
}

void Process1::Call( Mitov::String &AText )
{
  Declarations::_o_FormattedText1_o_Indexed0.Process( AText );
  Declarations::_o_FormattedText1_o_Indexed1.Process( AText );
  Declarations::_o_FormattedText1_o_Indexed2.Process( AText );
}

} // CallChains

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive0::Notify( void *_Data )
{
  Declarations::Instances::DetectEdge1.InputPin_o_Receive( _Data );
}

void PinCallerReceive1::Notify( void *_Data )
{
  Declarations::Instances::TArduinoFormattedTextElementInteger1.InputPin_o_Receive( _Data );
}

void PinCallerReceive2::Notify( void *_Data )
{
  Declarations::Instances::TArduinoFormattedTextElementText1_Input_IOWStringStream_1.InputPin_o_Receive( _Data );
}

void PinCallerReceive3::Notify( void *_Data )
{
  Declarations::Instances::TArduinoFormattedTextElementInteger2.InputPin_o_Receive( _Data );
}

void PinCallerReceive4::Notify( void *_Data )
{
  Declarations::Instances::FormattedText1.ClockInputPin_o_Receive( _Data );
}

void PinCallerReceive5::Notify( void *_Data )
{
  Declarations::Instances::TArduinoESP8266WiFiModuleScanNetworksOperation1.ScanInputPin_o_Receive( _Data );
}

void PinCallerReceive6::Notify( void *_Data )
{
  Declarations::Instances::TextValue1.ClockInputPin_o_Receive( _Data );
}

void PinCallerReceive7::Notify( void *_Data )
{
  Declarations::Instances::SerialPort0_Input_IOWStringStream_1.InputPin_o_Receive( _Data );
}

void PinCallerReceive8::Notify( void *_Data )
{
  Declarations::Instances::SerialPort0_Input_IOWStringStream_1.InputPin_o_Receive( _Data );
}

} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  BoardDeclarations::SystemPeriodMicros_1000000.SystemStarted();
  BoardDeclarations::Instances::SerialPort0.SystemInit();
  Declarations::Instances::TArduinoESP8266WiFiModule1.SystemInit();
  Declarations::Instances::TArduinoESP8266WiFiModule1.SystemStart();
  Declarations::Instances::TArduinoESP8266WiFiTime1.SystemStart();
  Declarations::Instances::ClockGenerator1.SystemStart();
  Declarations::Instances::DetectEdge1.SystemStart();
  Declarations::Instances::FormattedText1.SystemStart();
  Declarations::Instances::TArduinoFormattedTextElementText1.SystemStart();
  Declarations::Instances::TArduinoFormattedTextElementInteger1.SystemStart();
  Declarations::Instances::TArduinoFormattedTextElementInteger2.SystemStart();
}

// The loop function is called in an endless loop
void loop()
{
  BoardDeclarations::SystemPeriodMicros_1000000.SystemLoopBegin();
  Declarations::Instances::TArduinoESP8266WiFiModule1.SystemLoopBegin();
  Declarations::Instances::TArduinoESP8266WiFiModuleScanNetworksOperation1.SystemLoopBegin();
  Declarations::Instances::TArduinoESP8266WiFiTime1.SystemLoopBegin();
  Declarations::Instances::ClockGenerator1.SystemLoopBegin();
}
